mixin optMarkdown(desc, className)
	if desc.indexOf('<') === 0
		div(class=className)!= desc
	else
		p(class=className)= desc

mixin funcdeclx(name, func, isCtor)
	span.funcname= name
	ul.args
		if func.params
			each param in _.filter(func.params, function(param) {return param.name.indexOf('.') === -1;})
				li(class=param.optional ? 'optional' : undefined)= param.name
	if !isCtor && func.returns && func.returns[0]
		- var names = _.map(func.returns[0].type.names, tools.shortName);
		ul.returns
			each name in names
				li.return
					if tools.isBuiltInType(name)
						span= name
					else
						a(href='#' + name)= name

extends layout

block styles
	link(rel="stylesheet", href="/style.css")

block scripts
	script(src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.0.0/highlight.min.js")
	script(src='//cdnjs.cloudflare.com/ajax/libs/jquery-smooth-scroll/1.7.1/jquery.smooth-scroll.min.js')
	script(src='//cdnjs.cloudflare.com/ajax/libs/ScrollMagic/2.0.5/ScrollMagic.min.js')
	script(src="//cdnjs.cloudflare.com/ajax/libs/ScrollMagic/2.0.5/plugins/debug.addIndicators.min.js")
	//script.
		$(function() {
			var controller = new ScrollMagic.Controller({container: '.main', globalSceneOptions: {}});
			$('article').each(function(index, el) {
			try {
				var triggerId = '#' + el.id
				var targetId = '#nav-' + el.id
				new ScrollMagic.Scene({
						triggerElement: triggerId,
						triggerHook: 0.3,
						duration: $(triggerId).outerHeight(true)
					})
					//.setClassToggle(targetId, 'active-scroll')
					.setClassToggle(targetId + ',' + triggerId, 'active-scroll')
					//.addIndicators()
					.addTo(controller)
					} catch(err) {
					console.log('installing scrollspy failed for', triggerId, err)
					}
			})
		})
	script.
		$(function() {
			var controller = new ScrollMagic.Controller();
			var scene = new ScrollMagic.Scene({triggerElement: '#xxx', triggerHook: 0.0})
				.setPin('#api-nav')
				.addTo(controller)
		})
	script.
		$(function() {
		$('a').on('click', function(e) {
			if (this.hash.indexOf('#') !== 0) {
				return;
			}
			var target = this.hash.substr(1);
			var el = document.getElementById(target);
			$.smoothScroll({
				scrollTarget: $(el),
				offset: -1 * $('.main').scrollTop() - 50
			});
		}) })
	script.
		$(function() {
			console.log('init semantic ui')
			$('nav .module > .ui.accordion').accordion({
				selector: {
					trigger: '.title .icon',
					exclusive: false,
					closeNested: false,
					duration: 300
				}
			})
		})
	script.
		hljs.initHighlightingOnLoad()
	script.
		window.onload = function() {
			//if (window.location.href
			//window.location = window.location.href;
			console.log(window.location.href);
		};


block header

block content
	#title
		h1= doclet.repo
		h2 by
			a(href='/' + doclet.owner)= ' ' + doclet.owner
				if doclet._owner
					img.ui.left.spaced.avatar.image(src=doclet._owner.image, style='border-radius: 0px;')
		h3.version= doclet.version
		h4
			a(href=doclet.getRepoUrl()) all versions
	#xxx.api
		#nav-wrap
			include nav.jade
		.main
			block api


