block title
	title= doclet.repo + ' - ' + doclet.version
	meta(name='description', content='API Documentation of ' + doclet.repo + ' ' + doclet.type + ' "' + doclet.version +'". Created by ' + doclet.owner + '.')

mixin optMarkdown(desc, className)
	if desc.indexOf('<') === 0
		div(class=className)!= desc
	else
		p(class=className)= desc

mixin funcdeclx(name, func, isCtor)
	if name == ''
		span.funcname
			em exports
	else
		span.funcname= name
	ul.args
		if func.params
			- func.params.name = func.params.name
			each param in _.filter(func.params, function(param) {return param.name && param.name.indexOf('.') === -1;})
				li(class=param.optional ? 'optional' : undefined)= param.name
	if !isCtor && func.returns && func.returns[0] && func.returns[0].type
		- var names = _.map(func.returns[0].type.names, tools.shortName);
		ul.returns
			each name in names
				li.return
					if tools.isBuiltInType(name)
						span= name
					else
						a(href='#' + name)= name

extends layout


block scripts
	script(src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.0.0/highlight.min.js")
	script(src='//cdnjs.cloudflare.com/ajax/libs/jquery-smooth-scroll/1.7.1/jquery.smooth-scroll.min.js')
	script(src='//cdnjs.cloudflare.com/ajax/libs/ScrollMagic/2.0.5/ScrollMagic.min.js')
	script(src="//cdnjs.cloudflare.com/ajax/libs/ScrollMagic/2.0.5/plugins/debug.addIndicators.min.js")
	script(src='https://embed.tonicdev.com')
	script(defer='').
		$(function() {$('.playground').each(function() {
		  Tonic.createNotebook({element: this, source: $(this).data('code')})
		})})
	script.
	//script.
		$(function() {
			var controller = new ScrollMagic.Controller({container: '.main', globalSceneOptions: {}});
			$('article').each(function(index, el) {
			try {
				var triggerId = '#' + el.id
				var targetId = '#nav-' + el.id
				new ScrollMagic.Scene({
						triggerElement: triggerId,
						triggerHook: 0.3,
						duration: $(triggerId).outerHeight(true)
					})
					//.setClassToggle(targetId, 'active-scroll')
					.setClassToggle(targetId + ',' + triggerId, 'active-scroll')
					//.addIndicators()
					.addTo(controller)
					} catch(err) {
					console.log('installing scrollspy failed for', triggerId, err)
					}
			})
		})
	script.
		$(function() {
			var controller = new ScrollMagic.Controller();
			var scene = new ScrollMagic.Scene({triggerElement: '#xxx', triggerHook: 0.0})
				.setPin('#api-nav')
				.offset(-44)
				.addTo(controller)
		})
	script.
		$(function() {
		$('a[href^="#"]').on('click', function(e) {
			$.smoothScroll({
				scrollTarget: $(this.hash),
				offset: -1 * $('.main').scrollTop() - 50
			});
		}) })
	script.
		$(function() {
			console.log('init semantic ui')
			$('nav .module > .ui.accordion').accordion({
				selector: {
					trigger: '.title .icon',
					exclusive: false,
					closeNested: false,
					duration: 300
				}
			})
			var doclets = !{JSON.stringify(doclet.asFlat())}
			var source = doclets.map(function(doclet) {
				return {
					title: doclet.longname,
					description: doclet.description,
					url: '#dl-Request-contentLength'
				}
			})
			//$('.ui.search').search({source: source, content: source, type: 'category'})
			$('.ui.search').search({source: source, onSelect: function(e) {
				$.smoothScroll({
					scrollTarget: $(e.url),
					offset: -1 * $('.main').scrollTop() - 50
				});
			}})
		})
	script.
		hljs.initHighlightingOnLoad()
	script.
		window.onload = function() {
			//if (window.location.href
			//window.location = window.location.href;
			console.log(window.location.href);
		};



block content
	#title
		.background
		h1.ui.inverted.header= doclet.repo
		h3 by
			a(href='/' + doclet.owner)= ' ' + doclet.owner
				if doclet._owner
					img.ui.left.spaced.avatar.image(src=doclet._owner.image, style='border-radius: 0px;')
		h2.version= doclet.version
		h4
			a(href=doclet.getRepoUrl()) all versions

		if doclet.error
			h2.ui.icon.inverted.header
				i.icon.bug
					.content Zonk!
					.sub.header Sorry, something went wrong during creation of your doclet!
						p= 'Error: ' + doclet.error

		else
			.ui.inverted.statistics
				- var all = doclet.asFlat()
				- var modules = _.where(all, {kind: 'module'})
				- var classes = _.where(all, {kind: 'class'})
				- var functions = _.where(all, {kind: 'function'})
				- var members = _.where(all, {kind: 'members'})
				if modules.length > 0
					.statistic.modules
						.value= modules.length
						.label Modules
				if classes.length > 0
					.statistic.classes
						.value= classes.length
						.red.label Classes
				if functions.length > 0
					.statistic.functions
						.value= functions.length
						.label Functions
				if members.length > 0
					.statistic.members
						.value= members.length
						.label Members

		//.ui.category.search
			.ui.icon.input
				input.prompt(type='text', autocomplete='off')
				i.icon.search
			//.results
				each results,cat in doclet.byKind()
					.category
						.name= cat
						each result in results
							a(href='#'+tools.idFromLongname(result.longname)).result
								.content
									.title= result.name
									.description= result.longname
	if !doclet.error
		#xxx.api
			#nav-wrap
				include nav.jade
			.main
				block api
	
		a.big.circular.icon.button#scroll-top(href='#title')
			i.big.circular.icon.angle.up


