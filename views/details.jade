mixin examples(examplesArray, live)
	each example in examplesArray
		pre.example
			code= example

- var playgroundIndex = 0
mixin playgrounds(playgroundsArray)
	each playground in playgroundsArray
		- playgroundIndex++
		- id = 'playground-' + playgroundIndex
		div.playground(id=id, data-code=playground.value)


mixin see(seeArray)
	h4 See:
	ul.links
		each see in seeArray
			li!= see

		
mixin title(doclet, id)
	- var symbols = {'class': 'cube', 'module': 'small archive', 'member': 'cubes', 'file': 'small file', 'interface': 'file text', 'constant': 'lock', 'event': 'announcement'}
	- var colors = {'class': 'orange', 'module': 'purple', 'function': 'teal', 'member': 'yellow', 'constant': 'red'}
	h2.title
		span.ui.label(class=colors[doclet.kind] || 'yellow', style='background-color: #1B1C1D !important; border-width: 3px;' )
			if doclet.kind == 'function'
				.wrap
					em f
					sub x
			else if !symbols[doclet.kind]
				em= doclet.kind.substr(0,1)
			else
				i.icon(class=symbols[doclet.kind])
		- var names = tools.splitName(doclet)
		.names
			span.module= names.module
			span.parent= names.parent
			if doclet.kind == 'class'
				span.name
					+funcdeclx(names.name, doclet, true)
			else if doclet.kind == 'function'
				span.name
					+funcdeclx(names.name, doclet, false)
			else
				if names.name == ''
					span.name
						em exports
				else
					span.name= names.name
			
			a(href="#" + id).permalink
				i.tiny.icon.linkify

mixin typeList(type)
	if type.typeNames
		ul.types
			each t in type.typeNames
				li.typename
					each part in t
						if part.delimiter
							span= part.delimiter
						else
							a(href=part.url)= part.name
	

mixin paramDetails(param, name)
	if param
		h4.paramname= name
			if param.type
				+typeList(param.type)
			if param.optional
				span.optional optional
			if param.defaultvalue !== undefined
				span.default , default: 
				span.defaultvalue= param.defaultvalue
		if param.description
			+optMarkdown(param.description, 'description')

mixin nestedParamsList(paramNode)
	- var childParams = childs(paramNode)
	if childParams.length > 0
		ul.nested
			each childParam in childParams
				li
					+paramDetails(childParam.node.__content, childParam.name)
					+nestedParamsList(childParam.node)

mixin paramsList(params, className)
	ol.params(class=className)
		each param in params
			li
				+paramDetails(param.__content, param.__name)
				+nestedParamsList(param)

mixin flatParamsList(params, className)
	ol.params(class=className)
		each param in params
			li
				+paramDetails(param, param.name)

mixin details(doclet)
	if doclet.description
		+optMarkdown(doclet.description, 'description')
	if doclet.classdesc
		+optMarkdown(doclet.classdesc, 'classdesc')
	if !doclet.classdesc && !doclet.description
		p
			em No description available.
	if doclet.defaultvalue !== undefined
		h4 Default:
		pre
			- var isString = doclet.type && doclet.type.names && doclet.type.names[0].match(/^string/i)
			- var prefix = isString && "'" || ''
			code= prefix + doclet.defaultvalue + prefix
	if doclet.params && doclet.params.length > 0
		h4 Arguments:
		+paramsList(doclet.nestedParams, 'argumentlist')
	if doclet.returns && doclet.returns.length > 0
		h4 Returns:
		+flatParamsList(doclet.returns)
	if doclet.properties
		h4 Properties:
		+flatParamsList(doclet.properties)
	if !doclet.properties
		+members(doclet)
	if doclet.examples
		h4 Examples:
		+examples(doclet.examples)
	- var playgrounds = getPlaygrounds(doclet)
	if playgrounds
		h4 Playgrounds:
		+playgrounds(playgrounds)
	if doclet.see
		+see(doclet.see)
	

mixin infolist(doclet)
	.ui.very.relaxed.horizontal.list.infolist
		.item
			i.large.tag.middle.aligned.icon
			.content
				.description Kind
				.header= doclet.kind
		if doclet.since
			.item
				i.large.history.middle.aligned.icon
				.content
					.description Since
					.header= doclet.since
		if doclet.type
			.item
				i.large.diamond.middle.aligned.icon
				.content
					.description Type
					.header
						+typeList(doclet.type)
		if doclet.implements
			.item
				i.large.spy.middle.aligned.icon
				.content
					.description Implements
					.header= doclet.implements
		if doclet.inherits
			.item
				i.large.sitemap.middle.aligned.icon
				.content
					.description Inherits
					.header= doclet.inherits
		if doclet.scope
			.item
				i.large.unhide.middle.aligned.icon
				.content
					.description Scope
					.header= doclet.scope
		if doclet.deprecated
			.item
				i.large.ban.middle.aligned.icon
				.content
					.description Deprecated
					.header= doclet.deprecated === true ? 'yes' : doclet.deprecated
		.item
			i.large.code.middle.aligned.icon
			.content
				.description Source
				a.header(href=doclet.meta.url)= doclet.meta.filename + ':' + doclet.meta.lineno


mixin members(doclet)
	- var members = _.chain(flat).where({memberof: doclet.longname}).sortBy('longname').value()
	if members.length > 0
		h4 Members:
		ul.members
			each member in members
				- var id = tools.idFromLongname(member.longname)
				li
					a(href='#' + id)= member.name
	
mixin doclet(doclet)
	- var id = tools.idFromLongname(doclet.longname)
	article(id=id, class=doclet.kind)
		+title(doclet, id)
		+infolist(doclet)
		+details(doclet)
		if debug
			p= JSON.stringify(doclet)
	
mixin module(module)
	h2.modulename(id=module.longname)
		.ui.horizontal.big.purple.label module
		span= tools.modulename(module.longname)
	if module.description
		+optMarkdown(module.description, 'moduledescription')
	else
		p
			em No description available.

- var flat = doclet.asFlat()
each doclet in flat
	if doclet
	+doclet(doclet)

