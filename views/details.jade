mixin examples(examplesArray)
	each example in examplesArray
		pre.example
			code= example


mixin see(seeArray)
	span Links:
	ul
		each see in seeArray
			- var link = tools.linkFromSee(see);
			li
				a(href=link.url)= link.name || link.url

mixin funcDoclet(func, isCtor, parent)
	br
	h3.title(id=func.longname + (isCtor ? '~ctor' : ''))
		+funcdeclx(func, isCtor, parent)
		span.link
			if func.meta.url
				a(href=func.meta.url).braces= '</>'
			a(href='#' + func.longname)= '#'
	if func.params && func.params.length > 0
		p Arguments:
		+paramsList(func.params)
	if func.returns && func.returns.length > 0
		p Returns:
		+paramsList(func.returns)
	if func.description
		+optMarkdown(func.description, 'description')
	if func.examples
		+examples(func.examples)
	if func.see
		+see(func.see)

	
		
mixin title(doclet, prefix)
	br
	h3.title(id=doclet.longname)
		if prefix
			span.prefix= prefix
		span= doclet.name
		span.link
			if doclet.meta.url
				a(href=doclet.meta.url).braces= '</>'
			a(href="#" + doclet.longname)= '#'

mixin simpleDoclet(doclet)
	+title(doclet)
	if doclet.inherited
		div
			span Inherited from: 
				a(href='#' + doclet.inherits)= tools.shortName(doclet.inherits)
	else
		if doclet.description
			+optMarkdown(doclet.description, 'description')
		if doclet.examples
			+examples(doclet.examples)
		if doclet.see
			+see(doclet.see)
	


mixin paramDetails(param)
	h4.paramname= param.name
		if param.type
			ul.types
				each type in param.type.names
					li.typename
						if tools.isBuiltInType(type)
							span= type
						else
							a(href='#' + type)= type
		if param.optional
			span.optional optional
		if param.defaultvalue !== undefined
			span.default , default: 
			span.defaultvalue= param.defaultvalue
	if param.description
		+optMarkdown(param.description, 'description')

mixin paramsList(params)
	ul.params
		each param in params
			li
				+paramDetails(param)

mixin clazzDoclet(doclet)
	+title(doclet, 'class')
	if doclet.classdesc
		+optMarkdown(doclet.classdesc, 'classdesc')
	+funcDoclet(doclet, true)
	- var functions = _.filter(doclet.members, function(doclet) {return doclet.kind === 'function';});
	- var constants = _.filter(doclet.members, function(doclet) {return doclet.kind === 'constant';});
	- var members = _.filter(doclet.members, function(doclet) {return doclet.kind === 'member';});
	- var callbacks = _.filter(doclet.members, function(doclet) {return doclet.kind === 'typedef';}); // && doclet.type && doclet.type.names.find('function')});
	each constant in tools.sortByName(constants)
		+simpleDoclet(constant)
	each member in tools.sortByName(members)
		+simpleDoclet(member)
	each func in tools.sortByName(functions)
		+funcDoclet(func, false, doclet.name)
	each callback in tools.sortByName(callbacks)
		+funcDoclet(callback, false, doclet.name)
	
	

mixin module(id)
	- var module = modules[id];
	if id !== '_GLOBAL'
		h2.modulename(id=id)
			span.moduleprefix module
			span= tools.modulename(id)
		if module.doclet.description
			+optMarkdown(module.doclet.description, 'moduledescription')
	each constant in tools.sortByName(module.constants)
		article.constant
			+simpleDoclet(constant)
	each func in tools.sortByName(module.functions)
		article.function
			+funcDoclet(func)
	each interface in tools.sortByName(module.interfaces)
		article.interface
			+clazzDoclet(interface)
	each clazz in tools.sortByName(module.classes)
		article.clazz
			+clazzDoclet(clazz)
	each external in tools.sortByName(module.externals)
		article.external
			+simpleDoclet(external)


section.module
	+module('_GLOBAL')
each id in _.filter(_.keys(modules), function(name) {return name !== '_GLOBAL';})
	section.module
		+module(id)
