
mixin funcDoclet(func, isCtor, parent)
	- var title = isCtor ? 'new ' + func.name : func.name;
	h3
		if parent
			span= parent + '#'
		span= title
		ul.args
			if func.params
				each param in _.filter(func.params, function(param) {return param.name.indexOf('.') === -1;})
					li(class=param.optional ? 'optional' : undefined)= param.name
		if !isCtor && func.returns && func.returns[0]
			- var names = _.map(func.returns[0].type.names, tools.shortName);
			ul.returns
				each name in names
					li.return= name
		span
			a= '#'
	if func.description
		p.description= func.description
	
		
mixin title(doclet, prefix)
	h3
		if prefix
			span= prefix
		span= doclet.name
		span
			a= '#'

mixin simpleDoclet(doclet)
	+title(doclet)
	if doclet.description
		p.description= doclet.description

mixin clazzDoclet(doclet)
	+title(doclet, 'Class:')
	if doclet.classdesc
		p.classdesc= doclet.classdesc
	+funcDoclet(doclet, true)
	- var functions = _.filter(doclet.members, function(doclet) {return doclet.kind === 'function';});
	- var constants = _.filter(doclet.members, function(doclet) {return doclet.kind === 'constant';});
	each constant in tools.sortByName(constants)
		+simpleDoclet(constant)
	each func in tools.sortByName(functions)
		+funcDoclet(func, false, doclet.name)
	
	

mixin module(id)
	- var module = modules[id];
	h2.modulename= tools.modulename(id)
	each constant in tools.sortByName(module.constants)
		article.constant
			+simpleDoclet(constant)
	each func in tools.sortByName(module.functions)
		article.function
			+funcDoclet(func)
	each interface in tools.sortByName(module.interfaces)
		article.interface
			+clazzDoclet(interface)
	each clazz in tools.sortByName(module.classes)
		article.clazz
			+clazzDoclet(clazz)


	
each id in _.keys(modules)
	section.module
		+module(id)
